name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # Allow manual triggering
  workflow_dispatch:
  # Run nightly for comprehensive testing
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC daily

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chatapp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        test-suite: [
          "api",
          "agent",
          "database",
          "performance"
        ]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --extra dev

    - name: Setup test databases
      env:
        PGPASSWORD: postgres
      run: |
        # Create main test database
        psql -h localhost -U postgres -c "CREATE DATABASE chatapp_test;" || true
        # Create additional test databases for parallel testing
        psql -h localhost -U postgres -c "CREATE DATABASE chatapp_test_api;" || true
        psql -h localhost -U postgres -c "CREATE DATABASE chatapp_test_agent;" || true
        psql -h localhost -U postgres -c "CREATE DATABASE chatapp_test_db;" || true
        psql -h localhost -U postgres -c "CREATE DATABASE chatapp_test_perf;" || true

    - name: Run database migrations
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        PGPASSWORD: postgres
      run: |
        # Run migrations on all test databases
        for db in chatapp_test chatapp_test_api chatapp_test_agent chatapp_test_db chatapp_test_perf; do
          echo "Running migrations on $db"
          DB_DATABASE=$db uv run alembic upgrade head
        done

    - name: Run API Integration Tests
      if: matrix.test-suite == 'api'
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: chatapp_test_api
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/chatapp_test_api
        TESTING: "true"
      run: |
        uv run pytest tests/test_integration.py::TestAPIEndpoints -v --tb=short --maxfail=5
        uv run pytest tests/test_integration.py::TestExportFunctionality -v --tb=short --maxfail=5
        uv run pytest tests/test_integration.py::TestWebhookSystem -v --tb=short --maxfail=5
        uv run pytest tests/test_integration.py::TestVisualization -v --tb=short --maxfail=5

    - name: Run Agent Integration Tests
      if: matrix.test-suite == 'agent'
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: chatapp_test_agent
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/chatapp_test_agent
        TESTING: "true"
        # Mock API keys for testing
        OPENAI_API_KEY: test-key-123
        ANTHROPIC_API_KEY: test-anthropic-key
        SERPAPI_API_KEY: test-serpapi-key
        OPENWEATHER_API_KEY: test-weather-key
      run: |
        uv run pytest tests/test_integration.py::TestDSPyAgent -v --tb=short --maxfail=5
        uv run pytest tests/test_integration.py::TestToolIntegrations -v --tb=short --maxfail=5
        uv run pytest tests/test_integration.py::TestFullWorkflow -v --tb=short --maxfail=3

    - name: Run Database Integration Tests
      if: matrix.test-suite == 'database'
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: chatapp_test_db
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/chatapp_test_db
        TESTING: "true"
      run: |
        uv run pytest tests/test_integration.py::TestDatabaseOperations -v --tb=short --maxfail=5
        uv run pytest tests/test_integration.py::TestErrorHandling -v --tb=short --maxfail=5

    - name: Run Performance Tests
      if: matrix.test-suite == 'performance'
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: chatapp_test_perf
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/chatapp_test_perf
        TESTING: "true"
      run: |
        uv run pytest tests/test_performance.py::TestResponseTimes -v --tb=short --maxfail=3
        uv run pytest tests/test_performance.py::TestConcurrentRequests -v --tb=short --maxfail=3
        uv run pytest tests/test_performance.py::TestDatabasePerformance -v --tb=short --maxfail=3

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-suite }}
        path: |
          pytest.log
          coverage.xml
        retention-days: 7

  full-integration:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 45

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chatapp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --extra dev
        uv add psutil pytest-xdist

    - name: Setup test database
      env:
        PGPASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: chatapp_test_full
      run: |
        psql -h localhost -U postgres -c "CREATE DATABASE chatapp_test_full;" || true
        # Run migrations
        uv run alembic upgrade head

    - name: Run all integration tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: chatapp_test_full
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/chatapp_test_full
        TESTING: "true"
        # Mock API keys for comprehensive testing
        OPENAI_API_KEY: test-key-123
        ANTHROPIC_API_KEY: test-anthropic-key
        SERPAPI_API_KEY: test-serpapi-key
        OPENWEATHER_API_KEY: test-weather-key
      run: |
        # Run all integration tests with coverage
        uv run pytest tests/test_integration.py tests/test_performance.py \
          -v --tb=short --maxfail=10 \
          --cov=src --cov-report=xml --cov-report=html \
          --durations=10

    - name: Upload comprehensive coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: integration
        name: integration-coverage
        fail_ci_if_error: false

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-full
        path: htmlcov/
        retention-days: 14

  stress-tests:
    runs-on: ubuntu-latest
    # Only run stress tests on main branch or manual trigger
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 60

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: chatapp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"

    - name: Install dependencies
      run: |
        uv sync --extra dev
        uv add psutil pytest-xdist pytest-benchmark

    - name: Setup stress test database
      env:
        PGPASSWORD: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: chatapp_stress
      run: |
        psql -h localhost -U postgres -c "CREATE DATABASE chatapp_stress;" || true
        # Run migrations
        uv run alembic upgrade head

    - name: Run stress tests
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_DATABASE: chatapp_stress
        TEST_DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/chatapp_stress
        TESTING: "true"
      run: |
        # Run stress tests with extended timeouts
        uv run pytest tests/test_performance.py::TestStressTests \
          -v --tb=short --maxfail=3 \
          --timeout=300

    - name: Upload stress test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: stress-test-results
        path: |
          pytest.log
          *.json
        retention-days: 30
